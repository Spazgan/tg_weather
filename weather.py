import requests
import logging
import datetime
from config import open_weather_token

# –¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ OpenWeather API
open_weather_token = open_weather_token  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

async def get_weather_data(city_name: str):
    code_to_smile = {
        "Clear": "–Ø—Å–Ω–æ ‚òÄÔ∏è",
        "Clouds": "–û–±–ª–∞—á–Ω–æ ‚òÅÔ∏è",
        "Rain": "–î–æ–∂–¥—å üåß",
        "Drizzle": "–î–æ–∂–¥—å üåß",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ ‚ö°",
        "Snow": "–°–Ω–µ–≥ ‚ùÑÔ∏è",
        "Mist": "–¢—É–º–∞–Ω üå´"
    }
    try:
        logging.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_name}")

        r = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={open_weather_token}&units=metric"
        )
        data = r.json()

        if data.get("cod") != 200:
            return None

        city = data["name"]
        cur_weather = data["main"]["temp"]
        weather_description = data["weather"][0]["main"]
        wd = code_to_smile.get(weather_description, "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, –Ω–µ –ø–æ–π–º—É —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞")

        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]
        sunrise_timestamp = datetime.datetime.fromtimestamp(data['sys']['sunrise'])
        sunset_timestamp = datetime.datetime.fromtimestamp(data['sys']['sunset'])
        length_of_the_day = sunset_timestamp - sunrise_timestamp

        weather_data = {
            "city": city,
            "cur_weather": cur_weather,
            "wd": wd,
            "humidity": humidity,
            "pressure": pressure,
            "wind": wind,
            "sunrise_timestamp": sunrise_timestamp.strftime('%H:%M'),
            "sunset_timestamp": sunset_timestamp.strftime('%H:%M'),
            "length_of_the_day": str(length_of_the_day)
        }
        return weather_data
    except Exception as ex:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {ex}")
        return None
