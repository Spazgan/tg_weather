import requests
import logging
import datetime
import asyncio
from config import tg_token, open_weather_token
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, KeyboardButton, InlineKeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command
from DB import get_user, SessionLocal, User  

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, filename="py_log.log", filemode="w",
                    format="%(asctime)s %(levelname)s %(message)s")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = Bot(token=tg_token)
dp = Dispatcher()



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
async def get_weather_data(city_name: str):
    code_to_smile = {
        "Clear": "–Ø—Å–Ω–æ ‚òÄÔ∏è",
        "Clouds": "–û–±–ª–∞—á–Ω–æ ‚òÅÔ∏è",
        "Rain": "–î–æ–∂–¥—å üåß",
        "Drizzle": "–î–æ–∂–¥—å üåß",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ ‚ö°",
        "Snow": "–°–Ω–µ–≥ ‚ùÑÔ∏è",
        "Mist": "–¢—É–º–∞–Ω üå´"
    }
    try:
        logging.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_name}")

        r = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={open_weather_token}&units=metric"
        )
        data = r.json()

        if data.get("cod") != 200:
            return None

        city = data["name"]
        cur_weather = data["main"]["temp"]
        weather_description = data["weather"][0]["main"]
        wd = code_to_smile.get(weather_description, "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, –Ω–µ –ø–æ–π–º—É —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞")

        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]
        sunrise_timestamp = datetime.datetime.fromtimestamp(data['sys']['sunrise'])
        sunset_timestamp = datetime.datetime.fromtimestamp(data['sys']['sunset'])
        length_of_the_day = sunset_timestamp - sunrise_timestamp

        weather_data = {
            "city": city,
            "cur_weather": cur_weather,
            "wd": wd,
            "humidity": humidity,
            "pressure": pressure,
            "wind": wind,
            "sunrise_timestamp": sunrise_timestamp.strftime('%H:%M'),
            "sunset_timestamp": sunset_timestamp.strftime('%H:%M'),
            "length_of_the_day": str(length_of_the_day)
        }
        return weather_data
    except Exception as ex:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {ex}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–≥–æ–¥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_weather_response(message: Message, weather_data):
    if weather_data:
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {weather_data['city']}, {weather_data['cur_weather']}, {weather_data['wd']}")
        await message.reply(f"\n***{datetime.datetime.now().strftime('%d-%m-%Y %H:%M')}***"
            f"\n–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {weather_data['city']}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['cur_weather']}¬∞C {weather_data['wd']}\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['humidity']}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {weather_data['pressure']} –º–º.—Ä—Ç.—Å—Ç.\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {weather_data['wind']} –º/—Å\n"
            f"–†–∞—Å—Å–≤–µ—Ç: {weather_data['sunrise_timestamp']}\n–ó–∞–∫–∞—Ç: {weather_data['sunset_timestamp']}\n–°–≤–µ—Ç–æ–≤–æ–π –¥–µ–Ω—å: {weather_data['length_of_the_day']}\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"
        )
    else:
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. ‚ö†Ô∏è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã!\n"
                        "–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –≥–æ—Ä–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É: /reg [–≥–æ—Ä–æ–¥]")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reg (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞)
@dp.message(Command("reg"))
async def registration(message: Message):
    args = message.text.split(maxsplit=1)
    
    if len(args) < 2:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /reg Moscow.")
        return

    city = args[1].strip()
    username = message.from_user.username or str(message.from_user.id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º username, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ id

    session = SessionLocal()
    user = session.query(User).filter_by(username=username).first()

    if user:
        user.city = city  # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ä–æ–¥
    else:
        user = User(username=username, city=city)
        session.add(user)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    session.close()

    await message.reply(f"–ì–æ—Ä–æ–¥ {city} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã
@dp.message()
async def get_weather(message: Message):
    city_name = message.text.strip()
    username = message.from_user.username or str(message.from_user.id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤—ë–ª –≥–æ—Ä–æ–¥, –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –µ–≥–æ –∏–∑ –±–∞–∑—ã
    if not city_name:
        user = get_user(username)
        if user and user.city:
            city_name = user.city
        else:
            await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reg [–≥–æ—Ä–æ–¥], —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–π –≥–æ—Ä–æ–¥.")
            return

    weather_data = await get_weather_data(city_name)
    await send_weather_response(message, weather_data)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
 